Spring boot Interview Questions:



1.What is Spring boot?
	It is a java based framework. It is used to create the stand-alone production based application. It has a extra support of Auto configuration, embedded application servers
like tomcat and jetty.

2.Features of Spring Boot?
	Creates stand-alone spring application with minimal configuration needed.
	It has embedded tomcat, jetty which makes it just code and run the application.
	
	Provide production-ready features such as metrics, health checks, and externalized configuration.
	Absolutely no requirement for XML configuration.
	
3. What are the Spring Boot key components?
	Spring Boot auto-configuration.
	Spring Boot CLI.
	Spring Boot starter POMs.
	Spring Boot Actuators
	
4. What is the starter dependency?
	Spring boot starter is a maven template that contains a collection of all the relevant transitive dependencies that are needed to start a particular functionality.
	Like we need to import spring-boot-starter-web dependency for creating a web application.
	Data JPA starter.
	Test Starter.
	Security starter.
	Web starter.
	Mail starter.
	Thymeleaf starter.
	
5. 	How does Spring Boot works?
		Spring Boot automatically configures your application based on the dependencies you have added to the project by using annotation. 
	The entry point of the spring boot application is the class that contains @SpringBootApplication annotation and the main method.
	
6. What is @SpringBootApplication?
		@SpringBootApplication annotation is the combination of 3 @Configuration, @EnableAutoConfiguration, @ComponantScan 
		
		@Configuration - Indicates that the calss that contains spring configuration
		@EnbleAutoConfiguration - It is automatically enabled the configuration of spring application based on its dependencies and the environment
		@ComponantScan - It automatically scans all the beans and packages declaration when the application initialze
	
7. What is Spring Initializer?
	Spring Initializer is a web application that helps you to create an initial spring boot project structure and provides a maven or gradle file to build your code.

8. What is Spring Boot CLI and what are its benefits?
	Spring Boot CLI is a command-line interface that allows you to create a spring-based java application using Groovy.

9. What is Spring Boot dependency management?
	Spring Boot dependency management is used to manage dependencies and configuration automatically without you specifying the version for any of that dependencies
	
10. How to disable a specific auto-configuration class?
		To disable a specific auto-configuration class in a Spring Boot application, you can use the @EnableAutoConfiguration annotation along with the exclude attribute
		Ex : @EnableAutoConfiguration(exclude = SomeAutoConfigurationClass.class
	
		Alternatively, if you're using Spring Boot's application properties or YAML configuration, you can also disable auto-configuration for 
		specific classes by listing them in the spring.autoconfigure.exclude property:
		
		spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.SomeAutoConfigurationClass

11. Explain @RestController annotation in Spring boot?
		It is a combination of @Controller and @ResponseBody, used for creating a restful controller. 
		It converts the response to JSON or XML. 
		It ensures that data returned by each method will be written straight into the response body instead of returning a template.

12. What is the difference between @RestController and @Controller in Spring Boot?
	@Controller Map of the model object to view or template and make it human readable 
	@RestController simply returns the object and object data is directly written in HTTP response as JSON or XML
	
13. What is the difference between RequestMapping and GetMapping?
	RequestMapping can be used with GET, POST, PUT, and many other request methods using the method attribute on the annotation. 
	Whereas getMapping is only an extension of RequestMapping which helps you to improve on clarity on request.

14. What is the use of Profiles in spring boot?
	While developing the application we deal with multiple environments such as dev, QA, Prod, and each environment requires a different configuration. 
	For eg., we might be using an embedded H2 database for dev but for prod, we might have proprietary Oracle or DB2. 
	Even if DBMS is the same across the environment, the URLs will be different.
	To make this easy and clean, Spring has the provision of Profiles to keep the separate configuration of environments.
	
	To use profiles in your Spring Boot application, you can annotate your configuration classes with @Profile or 
	define profile-specific configuration files named application-{profile}.properties or application-{profile}.yaml

15. What is Spring Actuator? What are its advantages?
	An actuator is an additional feature of Spring that helps you to monitor and manage your application when you push it to production. 
	These actuators include auditing, health, CPU usage, HTTP hits, and metric gathering, and many more that are automatically applied to your application.

16. What is dependency Injection?
	The process of injecting dependent bean objects into target bean objects is called dependency injection.

	Setter Injection: The IOC container will inject the dependent bean object into the target bean object by calling the setter method.
	Constructor Injection: The IOC container will inject the dependent bean object into the target bean object by calling the target bean constructor.
	Field Injection: The IOC container will inject the dependent bean object into the target bean object by Reflection API.
	
17. What is an IOC container?
	IoC Container is a framework for implementing automatic dependency injection. 
	It manages object creation and its life-time and also injects dependencies into the class.
	
18. What is API?
	API stands for Application programming interface
	It has a set of rules , protocals, tools that allows different software application that communicate with each other.
	It defines the methods and data formats that applications can use to request and exchange information.
	
19. What are the HTTP methods?
		GET,POST,PUT,DELETE,PATCH
		GET : Get method is used to retrive the data from the specified resource.
		POST : Post method is used to submiting the form or uploading the files to the servers
		PUT: Put method is used to create or update the resource with the specified URI
		DELETE : delete method is used to delete the resource identified by the specified URI
		PATCH : Patch request is used to update the part of the resource rather than replacing the entire resource.
		
20.  What is swagger?
	Swagger simplifies the process of documenting and testing RESTful APIs in Spring Boot applications, 
	providing both developers and API consumers with a user-friendly interface for understanding and interacting with the API endpoints.
		

21. @Qualifier annotation
	When you have more than one bean of the same type, and you need to inject a specific one into your class.
	The @Qualifier annotation is used to resolve ambiguity when multiple beans of the same type are available for dependency injection. 
	
		Field Injuction: 
			@Autowired
			@Qualifier("serviceA")
			private MyService myService;
		
		Setter Injuction
			@Autowired
			@Qualifier("serviceA")
			public void setMyService(MyService myService) {
				this.myService = myService;
			}
			
			@Primary is used on bean definitions to make one bean the default candidate for autowiring.
			@Qualifier is used at the injection point to specify which bean to inject among multiple candidates.
			Use @Primary when you have a default bean that should be preferred in most cases.
			Use @Qualifier when you need to differentiate between multiple beans of the same type at specific injection points.

22. How to handle the exception in springboot?
	With the help of @controllerAdvice and @ExceptionHandler annotation
	The @ControllerAdvice annotation in Spring Boot is used to handle exceptions globally across all controllers. 
It allows you to centralize your exception handling logic in one place, making your code cleaner and easier to manage.

23.PreAuthorize
	The @PreAuthorize annotation in Spring Boot is part of the Spring Security framework. 
	It is used to apply method-level security to your application by specifying access control expressions. 
	This allows you to restrict access to certain methods based on roles, permissions, or other security expressions.

24. What is rest API?
	A REST API (Representational State Transfer Application Programming Interface) is a set of rules that allows programs to communicate with each other. 
	REST is an architectural style for designing networked applications.
	REST APIs use HTTP requests to perform CRUD (Create, Read, Update, Delete) operations on data.
	
25. Can use update operation in post method
	Yes, it is technically possible to perform an update operation using a POST method, 
	but it is not recommended because it violates the semantics of the HTTP methods and the principles of RESTful design.
	
26. @transactional annotation
	@Transactional annotation in Spring Framework is used to manage transaction boundaries. 
	It is applied to methods or classes to ensure that a series of database operations are executed within a single transaction. 
	If any operation within the transaction fails, the transaction can be rolled back to maintain data integrity.
	
27. PostConstruct and PreDestroy annotation
		The @PostConstruct annotation is used to mark a method that should be executed after the bean has been constructed and its dependencies have been injected. 
		This method is called once all the properties of the bean have been set, and it serves as an initialization callback method.
		
		The @PreDestroy annotation is used to mark a method that should be executed just before the bean is destroyed. 
		This method is called during the shutdown phase of the application, and it serves as a cleanup callback method.

		@PostConstruct: Marks a method to be executed after the bean's properties have been set and the bean is fully initialized.
		@PreDestroy: Marks a method to be executed just before the bean is destroyed, allowing for resource cleanup.
	





















JAVA Interview Questions:

this keyword

super keyword 

1. Serialization and Deserialization
	Serialization is a mechanism of converting the state of an object into a byte stream. 
	Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory. This mechanism is used to persist the object.
	
2. Authentication and authorization
	Authentication:
		Authentication is the process of verifying the identity of a user or entity. In web applications, users typically provide credentials (such as username/password) to prove their identity. 
	Authorization:
		Authorization is the process of determining whether an authenticated user has permission to access a particular resource or perform a specific action within the application.

3. JAVA 8 features?
			Lamda expression
			Method reference
			Functional Interface
			Stream API
			Default method in interface
			
4. What is lamda expression?
		Lambda expression helps us to write our code in functional style. 
		It provides a clear and concise way to implement SAM interface(Single Abstract Method) by using an expression. 
		It is very useful in collection library in which it helps to iterate, filter and extract data.
		syntax:
			lambda operator -> body
			
5. Method reference 
	Java 8 Method reference is used to refer method of functional interface .
	It is compact and easy form of lambda expression. 
	Each time when you are using lambda expression to just referring a method, you can replace your lambda expression with method reference.
	
	There are four types of method references that are as follows:

	Static Method Reference
	Instance Method Reference of a particular object
	Instance Method Reference of an arbitrary object of a particular type
	Constructor Reference.

6. Functional Interface
	An Interface that contains only one abstract method is known as functional interface. 
	It can have any number of default and static methods. It can also declare methods of object class.

	Consumer - Represents an operation that accepts a single input argument and returns no result.
	Supplier - Represents a supplier of results. It doesn't take any arguments but produces a result of a given type.
	Predicate - Represents a predicate (boolean-valued function) of one argument.
	Function - Represents a predicate (boolean-valued function) of one argument.
	
7. Define Streams 
	Stream API is introduced in Java 8 and is used to process collections of objects with the functional style of coding using the lambda expression.
		Three type of operations that carried over the streams
			1.Intermediate operations
			2.Terminal operations
			3.Short-circuit operations
	
	Intermediate Operations:
		Intermediate operations transform a stream into another stream. Some common intermediate operations include:
		filter(): Filters elements based on a specified condition.
		map(): Transforms each element in a stream to another value.
		sorted():  Sorts the elements of a stream.
		
		
	Terminal Operations
		Terminal Operations are the operations that on execution return a final result as an absolute value.

		collect(): It is used to return the result of the intermediate operations performed on the stream.
		forEach(): It iterates all the elements in a stream. 
		reduce(): It is used to reduce the elements of a stream to a single value.
		count()
		match()
		
	Short Circuit Operations
		Short-circuit operations provide performance benefits by avoiding unnecessary computations when the desired result can be obtained early. They are particularly useful when working with large or infinite streams.

		anyMatch(): it checks the stream if it satisfies the given condition. 
		findFirst(): it checks the element that matches a given condition and stops processing when it finds it.


	
8. Default Methods	
	Java provides a facility to create default methods inside the interface. 
	Methods which are defined inside the interface and tagged with default keyword are known as default methods. 
	These methods are non-abstract methods and can have method body.
	

9. Difference between collection and stream
	collections are used to store and manage data.
	while streams are used to process data in a functional style, enabling concise and expressive code for operations like filtering, mapping, and reducing.
	
	
10. string and string pool
	String pool is nothing but a storage area in Java heap where string literals stores. 
	It is just like object allocation
	By default, it is empty and privately maintained by the Java String class.
	Whenever we create a string the string object occupies some space in the heap memory. Creating a number of strings may increase the cost and memory too which may reduce the performance also.
	The JVM performs some steps during the initialization of string literals that increase the performance and decrease the memory load. 
	When we create a string literal, the JVM first check that literal in the String pool. If the literal is already present in the pool, it returns a reference to the pooled instance. If the literal is not present in the pool, a new String object takes place in the String pool.
	
11. JSP elements:
	
	Scriptlets (<% ... %>): Scriptlets are used to embed Java code within the JSP page. 
		Anything inside <% %> is interpreted as Java code and executed when the JSP page is processed.
	Directives (<%@ ... %>): Directives are used to give special instructions to the JSP container during the translation phase. There are three types of directives:
		page: Defines page-level attributes such as language, error handling, session handling, etc.
		include: Includes a file (JSP or HTML) in the current JSP page during translation.
		taglib: Declares that the JSP page uses custom tag libraries.
	Declarations (<%! ... %>): Declarations are used to declare variables and methods that are available to the entire JSP page. They are typically placed outside the main HTML content.
	Expressions (<%= ... %>): Expressions are used to embed Java expressions or variables directly into the HTML output. They are evaluated and converted to strings at runtime.
	Comments (<%-- ... --%>): Comments in JSP are similar to HTML comments but can be used anywhere within the JSP file. They are not sent to the client's browser.

12. How the servlet lifecycle works?
		init(), service(), destroy()
		
		when a request is made to the servlet for the first time, the container loads the servlet class and creates an instance of it.
		
		Initialization: After the servlet instance is created, the container initializes it by calling its init() method. This method is typically used for one-time initialization tasks such as loading configuration parameters or establishing database connections. The init() method is called only once during the servlet's lifetime.
		Servicing Requests: Once the servlet is initialized, it can start processing client requests. Each time a request is made to the servlet, the container invokes the servlet's service() method, passing in the request and response objects. The service() method then determines the type of request (GET, POST, etc.) and calls the appropriate method (doGet(), doPost(), etc.) to handle the request.
		Destroying: When the servlet container decides to shut down or when the servlet is no longer needed, it calls the servlet's destroy() method. This method allows the servlet to perform cleanup tasks, such as closing database connections or releasing resources. The destroy() method is called only once during the servlet's lifetime, just before the servlet instance is garbage collected.

13. Difference between JDBC and Hibernate
	JDBC is a lower-level API that requires developers to write SQL queries and handle database operations manually.
	Hibernate is a higher-level ORM framework that simplifies database interaction by mapping Java objects to database tables and providing automatic CRUD operations. 
	
14. What are the layers in struts?
		In the Struts framework, the typical application architecture is organized into several layers, following the Model-View-Controller (MVC) pattern. The layers in Struts include:
		
		The Model layer handles the business logic and data
		The View layer handles the presentation logic
		The Controller layer manages the flow of the application
		The Struts Configuration layer provides the necessary configuration to tie everything together.
		
15. Difference between Map and Filter in Stream API?

	Map and filter are intermediate operations
	
	Map is used to transform each element in the stream )into another object 
	Filter is used to select elements based on a condition
	
16. platform independent:
	Java is platform-independent because it is compiled to a bytecode that can be run on any device that has a Java Virtual Machine (JVM).
	
17.JVM:

JVM stands for Java Virtual Machine.
It is a Java interpreter. 
It is responsible for loading, verifying, and executing the bytecode created in Java.


17.	JRE:

JRE stands for Java Runtime Environment. 
It is a set of software tools which are used for developing Java applications.
It is used to provide the runtime environment.
It contains a set of libraries + other files that JVM uses at runtime.
it is an installation package that provides an environment to run the Java program or application on any machine.

18. JDK:

JDK stands for Java Development Kit. 
It is a software development environment which is used to develop Java applications and applets. 
It physically exists. It contains JRE + development tools.


19.JIT:

JIT stands for Just in time compiler
It is a part of JVM
It is responsible for compiling bytecode into native machine code at run time.

20.Garbage collector (GC)
	Garbage collector (GC) is a part of the Java Virtual Machine (JVM) responsible for automatically managing the memory used by Java objects. 
	It deallocates memory for objects that are no longer reachable or needed by the program, thus helping to prevent memory leaks and ensuring efficient memory usage.


21.What is a classloader?
	Classloader is the part of JRE(Java Runtime Environment), during the execution of the bytecode or created .class file classloader 
is responsible for dynamically loading the java classes and interfaces to JVM(Java Virtual Machine). 
Because of classloaders Java run time system does not need to know about files and file systems.
	

22. Data types in java
	Primitive Data Type
	Non-Primitive Data Type or Object Data type

Primitive Data Type: Primitive data are single values with no special capabilities. There are 8 primitive data types:

	boolean: stores value true or false
	byte: stores an 8-bit signed twoâs complement integer
	char: stores a single 16-bit Unicode character
	short: stores a 16-bit signed twoâs complement integer
	int: stores a 32-bit signed twoâs complement integer
	long: stores a 64-bit twoâs complement integer
	float: stores a single-precision 32-bit IEEE 754 floating-point
	double: stores a double-precision 64-bit IEEE 754 floating-point


23. Wrapper class:

	The wrapper class as a object class that provide the way to use primitive datatype as a object.
	wrapper class are final and immutable
	It provides autoboxing and unboxing
	It provides methods for performing operations
	
	(Integer,Byte,Boolean,Double) - wrapper class
	
24. Singleton class
	Singleton class in Java that allows only one instance of itself to be created and provides a global point of access to that instance
		example:
		Public class Singleton{
			private static Singleton instance; //
			
			// Private constructor to prevent instantiation from outside the class
			private Singleton(){}
			
			puble static getInstance(){
		
		if(instance == null{
			     instance = new Singleton();
			  }
			  
			  return instance;
			}
		
		}
	
25. static and final

	If the variable is declared as static it will be declared only once and the instance will be shared among the class.
	If the variable is declared as final. In that variable can be assigned the value only once. Once inlitialized it cannot be changed.
	
	
	
26. OOPS:
	Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects.
	There are 4 main pillers in oops.
		1.Inheritance
		2.Polymophisam
		3.Abstraction
		4.Encapsulation
		
27. Inheritance:
	 To write the new class from the existing once. We can have access the properties and methods from the existing once. It is parent child relationship.
	 Inheritance is a mechanism wherein a new class inherits the properties and behaviors of an existing class. 
	 The class being inherited from is called the parent or base class, and the class that inherits is called the child or derived class.
	 It is mainly used for code resuablity.
	 
	 1.Single inheritancr
	 2.Multi level inheritance
	 3. Multiple inheritance
	 4.Hierarchal inheritance
	 
	 
28. Encapsulation
	Encapsulation is the mechanism of wrapping the data (variables) and code (methods) together as a single unit.
	Encapsulation, is to make sure that "sensitive" data is hidden from users.
	Declare the variable as private. Access that variable out side the class with the help of getter and setter method.
	
29. Polymorphism
		Polymorphism in Java is a concept by which we can perform a single action in different ways.
		1.Compile time polymorphism (method over loading)
		2.Run time polymorphism (method over ridding)
	

	
	
29. Abstraction
	Data abstraction is the process of hiding the certain deatils and showing the essantial information to the user.
	We can not create the object to the abstract class.
	// Abstract class
abstract class Animal {
  // Abstract method (does not have a body)
  public abstract void animalSound();
  // Regular method
  public void sleep() {
    System.out.println("Zzz");
  }
}

// Subclass (inherit from Animal)
class Pig extends Animal {
  public void animalSound() {
    // The body of animalSound() is provided here
    System.out.println("The pig says: wee wee");
  }
}
class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig(); // Create a Pig object
    myPig.animalSound();
    myPig.sleep();
  }

30. Access modifier in java	
	private : It is access only with in the class.
	producted : It is access only the class and subclasses which we have defined
	public : It is access by all the classes in our application
	Default : It is access only with in the class and the package. We did not specified any access specifier it assigned the default access specifier.
	
	Default : 
	When no access modifier is specified for a class, method, or data member â
	It is said to be having the default access modifier by default.
	The data members, classes, or methods that are not declared using any access modifiers 
	i.e. having default access modifiers are accessible only within the same package.

31. Differnce between collection and collections
	
	Collection:
		An interface that provides the foundational structure for various types of collections (e.g., List, Set, Queue).
		Defines methods that all collections must implement.
	Collections:
	A utility class with static methods to manipulate and interact with collections.
	Provides functionalities like sorting, searching, and synchronizing collections.

32.Difference between array list and linked list

	Arraylist :
		It uses the dynamic array to store elements
		It maintain the insertion order
		It accept duplicates and null values
		Manipulation is low because when we remove the elemnts from array list the shifting is occuring the memory
		It is mainly used for store and access the elements.
	Linked list:
		It uses the doubbly linked list to store elements
		It maintain the insertion order.
		It accept duplicates and null values'
		Manipulation is fast. because when we remove any elemnts from the list no shifting is occured.
	It is mainly used for manipulating the data.
		
		
33.Difference between Hashmap and TreeMap
	Hashmap:
		Java HashMap contains values based on the key.
		Java HashMap contains only unique keys.
		Java HashMap may have one null key and multiple null values.
		Java HashMap is non synchronized.
		Java HashMap maintains no order
	Linked Hasmap:
		Java LinkedHashMap contains values based on the key.
		Java LinkedHashMap contains unique elements.
		Java LinkedHashMap may have one null key and multiple null values.
		Java LinkedHashMap is non synchronized.
		Java LinkedHashMap maintains insertion order.
	Treemap:
		Java TreeMap contains values based on the key. It implements the NavigableMap interface and extends AbstractMap class.
		Java TreeMap contains only unique elements.
		Java TreeMap cannot have a null key but can have multiple null values.
		Java TreeMap is non synchronized.
		Java TreeMap maintains ascending order.
	Hash table:
		A Hashtable is an array of a list. Each list is known as a bucket. The position of the bucket is identified by calling the hashcode() method. 
		A Hashtable contains values based on the key.
		Java Hashtable class contains unique elements.
		Java Hashtable class doesn't allow null key or value.
		Java Hashtable class is synchronized.

34. stack memory and heap memory
		Stack memory is used for the execution of a thread. 
		It stores local variables, method call information, and reference variables (not the objects themselves, which are stored in the heap).
			
		Heap memory is used for dynamic memory allocation. It stores objects and instances of classes.

		Stack Memory: Fast, limited in size, stores local variables, references, and method call information. Each thread has its own stack.
		Heap Memory: Larger, shared among all threads, stores objects and arrays. Managed by the garbage collector for dynamic memory management.


35. comparable and comparator interface
	In Java, Comparable and Comparator are interfaces used for sorting objects. 
	They provide a way to define the natural order of objects and a way to define custom orders, respectively.

	Comparable:
		The Comparable interface is used to define the natural ordering of objects. It contains a single method, compareTo(), 
		which compares the current object with another object of the same type.
	comparator:
		The Comparator interface is used to define custom ordering of objects. It contains two methods, compare() and equals() (although equals() is rarely overridden).
	
	class Employee implements Comparable<Employee> {
		private int id;
		private String name;

		public Employee(int id, String name) {
			this.id = id;
			this.name = name;
		}

		@Override
		public int compareTo(Employee other) {
			return this.id - other.id; // Sorting by id
		}

		//getter and setter
	}

	class EmployeeNameComparator implements Comparator<Employee> {
		@Override
		public int compare(Employee e1, Employee e2) {
			return e1.getName().compareTo(e2.getName()); // Sorting by name
		}
	}












Docker Interview Questions

1.what is docker?

	Docker is a very popular and powerful open-source containerization platform that is used for building, deploying, and running applications. 
	Docker allows you to decouple the application/software from the underlying infrastructure.

2.How many Docker components are there?	
	Docker Client: This component performs âbuildâ and ârunâ operations for the purpose of opening communication with the docker host.
	Docker Host: This component has the main docker daemon and hosts containers and their associated images. The daemon establishes a connection with the docker registry.
	Docker Registry: This component stores the docker images. There can be a public registry or a private one. The most famous public registries are Docker Hub and Docker Cloud.
	

3. docker file comments?
	Docker can build image automatically by reading the instruction from the docker file.
	Docker file is a text document that contain all the commands a user could call command-line to assamble the image

	FROM in Dockerfile Instruction used to specify Docker Image Name and start the build process. (FROM openjdk17:latest)
	MAINTAINER in Dockerfile Instruction is used to about the person who creates the Docker Image. (MAINTAINER support@fosstechnix.com)
	RUN in Dockerfile Instruction is used to execute any commands on top of current Docker Image
	LABEL in Dockerfile Instruction is used to specify metadata information of Docker Image.(LABEL "Date"="2020-09-29")
	EXPOSE in Dockerfile Instruction is used to specify Network port for Docker container. (EXPOSE 9001)
	ENV in Dockerfile Instruction is used to set Environment Variables with key and value.
	ADD: Copies a file and directory from your host to Docker image, however can also fetch remote URLs, extract TAR/ZIP files. (ADD target/masters-0.0.1-SNAPSHOT.jar master-service.jar)
	COPY in Dockerfile Instruction used to Copies a file or directory from your host to Docker image.
	ENTRYPOINT in Dockerfile Instruction is used you to configure a container that you can run as an executable. (ENTRYPOINT ["java", "-jar", "master-service.jar"] )
	

4. Docker compose
	Docker Compose is a tool used for defining and running multi-container Docker applications. 
	It allows you to use a YAML file to configure your applicationâs services, networks, and volumes, and then deploy and manage them as a single unit. 
	Essentially, Docker Compose simplifies the process of orchestrating multiple Docker containers that work together to form a complete application.
	
	It is a YAML file consisting of all the details regarding various services, networks, and volumes that are needed for setting up the Docker-based application.

5. What is docker image registry?
	A Docker image registry, in simple terms, is an area where the docker images are stored. Instead of converting the applications to containers each and every time, 
	a developer can directly use the images stored in the registry.
	This image registry can either be public or private and Docker hub is the most popular and famous public registry available.
	

What is maven?

Maven is a build automation and project management tool primarily used for Java projects. 
Developed by the Apache Software Foundation, Maven simplifies the build process by managing project dependencies, 
compiling source code, packaging the compiled code into JAR or WAR files, and managing project documentation.
	
Artifact-ID, group-ID





Hibernate:

1. What is Hibernate?
	Hibernate is an open-source framework that makes it easier to store information in a relational database.
	It converts Java objects to corresponding database tables easily with ORM. 
	Making it easier to manage database operations like CRUD (Create, Read, Update, Delete) without having to write extensive SQL queries.
	Hibernate provide the HQL query language which is simiar to SQL
	
2. Hibernate annotation

	@Entity - Marks a class as a persistent Java class (an entity).
	@Table - Specifies the primary table for the annotated entity. It is used in conjunction with the @Entity annotation.
	@ID - Specifies the primary key of an entity.
	@GeneratedValue - Specifies the strategy for generating primary key values.
	@Column - Specifies the details of the column to which a field or property will be mapped.
	@Temporal - Specify to store the format of the date 
	@Lob
	@OneToOne
	@OneToMany
	@ManyToOne
	@ManyToMany
	@JoinColumn(nAME="")
	@Trasient - Tells the hibernate, not to add this particular column
	
	
3. Dialect
	Dialect is a class that acts as a bridge between Java JDBC types and SQL types, which contains the mapping between java language data type and database datatype. 
	Dialect allows Hibernate to generate SQL optimized for a particular relational database. Hibernate generates queries for the specific database based on the Dialect class. 
	A hibernate dialect gives information to the framework of how to convert hibernate queries(HQL) into native SQL queries.


4. Aggrigation function
	Aggigate functions are used to perform the calculation on multiple values to produce the single unit.
	AVG(), MIN(), MAX(), COUNT(), SUM(), GROUPBY, GROUP_CONCAT()
	

MicroServices architecture:

	In Microservice architecture, We break down the application into small serviecs. Each services has developed,  deployed and maintain the code easly.
	These services are not depended to each other.
	If any one of the service is getting down it does not affect the any other services.
	

API Gateway
	API Gateway acts as a reverse proxy to route requests to appropriate microservices.
	It provides a single entry point for clients and can handle tasks like authentication, logging, rate limiting, and more.
	

difference between map and flatmap?
	map: Transforms each element to another form (one-to-one mapping).
flatMap: Transforms each element to a stream and then flattens these streams into a single stream (one-to-many mapping and flattening).



1.How will you optimize the database queries
	Create Indexes: Create indexes on columns that are frequently used in WHERE clauses, join conditions, and as part of ORDER BY or GROUP BY clauses.
	Query Optimization :
		Avoid SELECT : Only select the columns you need.
	Use WHERE Clauses Efficiently: Use proper filtering in WHERE clauses to reduce the number of rows processed.
	Limit Results: Use LIMIT or equivalent to fetch only the required number of rows.
	Avoid Subqueries: Use joins instead of subqueries where possible, as joins are usually more efficient.
	Partitioning: Split large tables into smaller, more manageable pieces (partitions) to improve query performance and manageability.
	 Caching
Implement caching to store frequently accessed data in memory, reducing the number of database queries.

Application-Level Caching: Use in-memory data stores like Redis or Memcached.
Database Caching: Use built-in database caching mechanisms if available.


SELECT s.first_name, s.last_name, c.class_name,
       (SUM(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.attendance_id)) AS attendance_percentage
FROM students s
JOIN student_class sc ON s.student_id = sc.student_id
JOIN classes c ON sc.class_id = c.class_id
JOIN attendance a ON sc.student_class_id = a.student_class_id
WHERE s.student_id = 1 AND c.class_id = 1
GROUP BY s.first_name, s.last_name, c.class_name;


Student , Class, Attendence 

student_id
class_id
student_name
student_address
student_age
foreignkey(class_id) references class(class_id)

Class
class_id
class_name

attendance
attendance_id
student_id
attendance_status = P/A
attendance_date
foreignkey(student_id) references Student(student_id)


select s.student_id,s.student_name, c.class_name, sum(case when a.attendance_status = 'P' then 1 else 0 end) * 100.0 / count(attendance_id) as attendance_percentage from s.students
Join attendance a on a.student_id = s.student_id 
Join class c on c.class_id = s.class_id
where c.class_id =1
group by s.student_id, s.student_name, c.class_name




final method
	A final method cannot be overridden by subclasses.
Final Classes
A final class cannot be subclassed. This is useful for creating immutable classes or to prevent inheritance for security or design reasons.

The finalize method is a protected method of the Object class that the garbage collector calls just before it reclaims the memory occupied by an object. 
It was originally intended to allow developers to perform cleanup operations, but its use is generally discouraged because it is unpredictable and unreliable.

Difference between Default and Protector 
	When no access modifier is specified, the default access level is applied. It can access only with in the class and the same packages
	It can access only the class and subsclass in other packages
	
spring filter
	filter is used to perform filtering tasks on either the request to a resource or the response from a resource, or both. 
	Filters are part of the servlet API, and Spring provides integration with servlet filters through the javax.servlet.Filter interface. 
	Filters are commonly used for tasks such as:
		Logging request and response details
		Authentication and authorization checks
		Input validation
		Request modifications
		
What is Spring Buffer?
	In the context of Spring, buffering is often associated with data streams and I/O operations. 
	Buffers can be used to manage data reading and writing efficiently. However, Spring itself does not provide a specific "buffer" class or concept; 
	instead, it integrates with standard Java I/O libraries that utilize buffering, such as BufferedReader, BufferedWriter, InputStream, and OutputStream.
	
Custom garpage collector?
	Java provides an automatic garbage collection mechanism, which manages the allocation and deallocation of memory. 
	However, Java does not allow you to write a custom garbage collector. 
	Instead, you can tune the behavior of the existing garbage collector through various JVM options and configurations.
	
Feature	GET	POST
Purpose	 		Retrieve data from the server				Send data to the server
Parameters		Appended to the URL as query parameters		Included in the request body
Caching			Can be cached								Not cacheable by default
Browser 		History	Stored in the browser history		Not stored in the browser history
Bookmarking		Can be bookmarked							Cannot be bookmarked
Data Length		Limited by the URL length					Not limited by the URL length
Idempotent		Yes											No
Security		Less secure (parameters visible in URL)		More secure (parameters not visible in URL)


A primary key is a column (or a combination of columns) in a table that uniquely identifies each row in that table. 
There can be only one primary key in a table, and it must contain unique values for each row

We can create more than one unique key in table. it accept null values. but it is single null value.



Different between hashing Algorithm and Encryption

Purpose: Hashing is used for data integrity verification and unique identification (like in hash tables), while encryption is used for ensuring confidentiality and securing data.

Output: Hashing produces a fixed-size hash value, whereas encryption transforms data into ciphertext of variable length.

Reversibility: Hashing is irreversible, while encryption is reversible with the correct decryption key.

Security Requirements: Encryption requires keys for both encryption and decryption, while hashing typically does not involve keys (except in HMAC, which uses keys for added security).

Usage: Hashing is used for integrity checks, password hashing, and digital signatures. Encryption is used for securing sensitive data, communication channels, and ensuring privacy.

Example Use Cases
Hashing: Storing passwords securely by hashing them and storing the hash. Checking file integrity by comparing hash values before and after transmission.

Encryption: Securing communications over the internet (e.g., HTTPS), protecting sensitive data in databases, ensuring privacy of personal information.


 

**********************************************************************************************************************

1) JDK ->


2) JRE ->


3) JVM ->


4) Class loader ->


5) Difference between Collection and Collections ->


6) What is Array  ->


7) String pool ->


8) Functional Interface ->


9) Default Method ->


10) Static method ->


11) Serialization ->


12) Final ->


13) Finally ->	


14) Finalize() ->


15) Custom Exception ->


16) CuncurrentHashMap ->


17) stack ?  ->


18) heap ? ->


19) What is Exception ->


20) Exception Types ->

21) Acending order without predefined?
	int ar[] = {10,12,45,2,1,4,8,72,-9}; ->

21) Decending Order?
	int ar[] = {10,12,45,2,1,4,8,72,-9}; ->

22) Find highest element in array?
	int ar[] = {10,12,45,2,1,4,8,72,-9}; ->


23) Expalin Project flow and how it works ->


24) Read CSV file from system file ->


25) Find the Duplicate element in Array Without using predefined -> // FIND THE DUPLICATE ELEMENT IN ARRAY 
		
		int arr[] = {10,8,45,2,1,2,8,72,-9};
		
		for(int i=0; i<arr.length;i++) {
			for(int j=i+1; j<arr.length;j++) {
			if(arr[i]==arr[j]) {
				System.out.println(arr[i]);
			}
				
			}
		}


26) Find the Duplicate element in Array using stream ->
int ar[] = {10,-9,45,2,1,4,2,72,-9}; 


27) Reverse the String without predefined ->


28) Reverse the String using streams ->


29) Substring ->


30) Is possible to store same string variable? ->


29) Why String are immutable in java ->


30) Separate the minus value ->

	 int ar[] = {10,-9,45,2,1,4,2,72,-9}; 

31) Reverse using substring - >
	String str ="College";

32) Reverse the sentense word by word without predefined ->

	String = "Hi Welcome to java";

33) Reverse the sentense word by word using stream ->

	String = "Hi Welcome to java";

34) Inheritance ->

35) Types of Inheritance ->

36) Why multiple Inheritance not supported in java? ->

37) Abstraction class ? -> can we create constructor for this class? ->

38) Abstract method ? -> can we ovveride or overload? ->

39) When you use stream -> sorted(), when you use without stream sort() -> not a question just keep in mind

40